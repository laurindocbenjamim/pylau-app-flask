
import pyotp
import traceback
import sys
import os
from datetime import date
from markupsafe import escape
from flask_login import login_user, logout_user
from flask.views import View
from flask import render_template, abort,current_app, g, session, request, redirect, url_for, flash, jsonify
from ....configs_package.modules.logger_config import get_message as set_logger_message

class VerifyAppAuthCodeView(View):
    """
    View class for handling the verification of app code authentication.

    This class is responsible for handling the POST request to verify the app code authentication.
    It checks if the provided OTP code matches the code generated by the user's two-factor authentication secret.
    If the verification is successful, a success message is flashed and a JSON response is returned.
    If the verification fails, an error message is flashed.

    Attributes:
        twoFaModel (object): The two-factor authentication model object.
        template (str): The template to render for the view.

    Methods:
        dispatch_request(): Handles the POST request and verifies the app code authentication.

    """

    methods = ['GET', 'POST']
    
    def __init__(self, userToken, userModel, twoFaModel, authUserHistoric, template):
        self.userToken = userToken
        self.twoFaModel = twoFaModel
        self.userModel = userModel
        self.authUserHistoric = authUserHistoric
        self.template = template
    
    def dispatch_request(self, user_token: str):
        """
        Handles the POST request and verifies the app code authentication.

        This method is called when a POST request is made to verify the app code authentication.
        It retrieves the OTP code from the request form and checks if it matches the code generated by the user's
        two-factor authentication secret. If the verification is successful, a success message is flashed and a JSON
        response is returned. If the verification fails, an error message is flashed.

        Returns:
            If the verification is successful, a JSON response with status 'success' and message 'Email verified successfully!'
            If the verification fails, a JSON response with status 'error' and message 'Email code verification failed'

        """

        # Check if the token is expired
        if self.userToken.is_user_token_expired(escape(user_token)):
            session.clear()
            logout_user()
            return redirect(url_for('auth.user.login'))
                 
        if request.method == 'POST' and user_token is not None:
            
            try:
                status,token = self.userToken.get_token_by_token(escape(user_token))                       
                
                code = request.form.get('otpcode',None)
                # Get the user details using the email address
                status, user = self.userModel.get_user_by_email(token.username)

                # Check if the user is identified

                if code is not None and status and user is not None:
                                    
                    secret = current_app.config['OTP_SECRET_KEY']

                    otpstatus = self.twoFaModel.verify_provisioning_uri(secret=secret, code=code)
                            
                    if otpstatus:
                            
                        resp = self.authUserHistoric.create_auth_user(user.userID, user.email, '')
                                        
                        status, user = self.userModel.get_user_by_id(user.userID)
                        session['user_id'] = user.userID
                        session['firstname'] = user.firstname
                        session['lastname'] = user.lastname
                        session['email'] = user.email
                        session['country'] = user.country
                        session['country_code'] = user.country_code
                        session['phone'] = user.phone
                        session['active'] = user.active
                        session['role'] = user.role
                        session['date_added'] = user.date_added
                        session['date_updated'] = user.date_updated
                        session['user_token'] = token.token
                            
                        login_user(user)
                        g.user = user  
                        flash('Code verified successful', 'success')
                        return redirect(url_for('index', user_token=str(token.token))) 
                    else:
                        flash('Invalid code detected', 'error')      
                else:
                    flash(f'User not identified.', 'error')
            except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    set_logger_message(f"Error occured on [VerifyAppAuthCodeView]: \n \
                                       Exception: {str(sys.exc_info())}\
                                       \nFile name: {fname}\
                                       \nExc-instance: {fname}\
                                       \nExc-classe: {exc_type}\
                                       \nLine of error: {exc_tb.tb_lineno}\
                                       \nTB object: {exc_tb}\
                                       \nTraceback object: {str(traceback.format_exc())}\
                                        ") 


        return render_template(self.template, title='Code verification', origin='login_auth_app_', user_token=escape(user_token))
            
    