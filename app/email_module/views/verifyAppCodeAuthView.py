
import pyotp

from datetime import date
from markupsafe import escape
from flask_login import login_user, logout_user
from flask.views import View
from flask import render_template, abort,current_app, g, session, request, redirect, url_for, flash, jsonify

from ...token_module.userTokenModel import UserToken

class VerifyAppCodeAuthView(View):
    """
    View class for handling the verification of app code authentication.

    This class is responsible for handling the POST request to verify the app code authentication.
    It checks if the provided OTP code matches the code generated by the user's two-factor authentication secret.
    If the verification is successful, a success message is flashed and a JSON response is returned.
    If the verification fails, an error message is flashed.

    Attributes:
        twoFaModel (object): The two-factor authentication model object.
        template (str): The template to render for the view.

    Methods:
        dispatch_request(): Handles the POST request and verifies the app code authentication.

    """

    methods = ['GET', 'POST']
    
    def __init__(self, userToken, userModel, TwoFaModel, template):
        self.userToken = userToken
        self.twoFaModel = TwoFaModel
        self.userModel = userModel
        self.template = template
    
    def dispatch_request(self, user_token: str):
        """
        Handles the POST request and verifies the app code authentication.

        This method is called when a POST request is made to verify the app code authentication.
        It retrieves the OTP code from the request form and checks if it matches the code generated by the user's
        two-factor authentication secret. If the verification is successful, a success message is flashed and a JSON
        response is returned. If the verification fails, an error message is flashed.

        Returns:
            If the verification is successful, a JSON response with status 'success' and message 'Email verified successfully!'
            If the verification fails, a JSON response with status 'error' and message 'Email code verification failed'

        """
                 
        if request.method == 'POST' and user_token is not None:
            
            # Check if the token is expired
            if self.userToken.is_user_token_expired(escape(user_token)):
                abort(401)
            
            status, token = self.userToken.get_token_by_token(escape(user_token))
            # Check if the token is already used
            code = request.form.get('otpcode',None)

            if code is None:
                flash("Enter a valid code")

            elif status and token is not None:
                
                secret = current_app.config['OTP_SECRET_KEY']

                otpstatus = self.twoFaModel.verify_provisioning_uri(secret='', code=code)
                      
                if otpstatus:

                    # Save the image with the new name is the verification is successful
                    if 'otpqrcode' in session:
                        current_date = date.today()
                        
                        new_image_name = secret\
                              +'-otpqrcode-done-'+current_date.strftime("%Y-%m-%d")
                        
                        self.twoFaModel.update_imagename('app/static/otp_qrcode_images/' \
                                         + session['otpqrcode'], new_image_name)

                    flash('Code verified successful', 'success')
                    return redirect(url_for('email.activate_send', user_token=token.token)) 
                        
                else:
                    flash('Invalid code provided', 'error')
            else:
                flash(f'User not identified.', 'error')


        return render_template(self.template, title='2-FA App Authentication', form_title='Enter the code provided by the Authenticator App')
            
    