
import flask
from datetime import date
from flask.views import View
from flask import render_template, request, redirect, url_for, flash, jsonify



class VerifyAppCodeAuthView(View):
    """
    View class for handling the verification of app code authentication.

    This class is responsible for handling the POST request to verify the app code authentication.
    It checks if the provided OTP code matches the code generated by the user's two-factor authentication secret.
    If the verification is successful, a success message is flashed and a JSON response is returned.
    If the verification fails, an error message is flashed.

    Attributes:
        twoFaModel (object): The two-factor authentication model object.
        template (str): The template to render for the view.

    Methods:
        dispatch_request(): Handles the POST request and verifies the app code authentication.

    """

    methods = ['GET', 'POST']
    
    def __init__(self, twoFaModel, UserModel, template):
        self.twoFaModel = twoFaModel
        self.UserModel = UserModel
        self.template = template
    
    def dispatch_request(self):
        """
        Handles the POST request and verifies the app code authentication.

        This method is called when a POST request is made to verify the app code authentication.
        It retrieves the OTP code from the request form and checks if it matches the code generated by the user's
        two-factor authentication secret. If the verification is successful, a success message is flashed and a JSON
        response is returned. If the verification fails, an error message is flashed.

        Returns:
            If the verification is successful, a JSON response with status 'success' and message 'Email verified successfully!'
            If the verification fails, a JSON response with status 'error' and message 'Email code verification failed'

        """
                 
        if request.method == 'POST':
            code = request.form.get('otpcode',None)

            if code is not None and 'two_factor_auth_secret' in flask.session and 'email' in flask.session\
                and 'user_id' in flask.session:

                user_id = flask.session['user_id']
                
                totp = self.twoFaModel.verify_provisioning_uri(secret=flask.session['two_factor_auth_secret'], code=code)
                otpstatus =  totp.verify(code)
                
                if otpstatus:

                    # Save the image with the new name is the verification is successful
                    if 'otpqrcode' in flask.session:
                        current_date = date.today()
                        
                        new_image_name = flask.session['two_factor_auth_secret']\
                              +'-otpqrcode-done-'+current_date.strftime("%Y-%m-%d")
                        
                        self.twoFaModel.update_imagename('app/static/otp_qrcode_images/' \
                                         + flask.session['otpqrcode'], new_image_name)

                    # If the origin request is register, redirect to the activate account endpoint
                    if 'origin_request' in flask.session:
                        if flask.session['origin_request'] == 'register':
                            return redirect(url_for('email.activate_send'))
                        
                    flash('Code verified successful', 'success')
                    return jsonify({'status': 'success', 'message': 'Email verified successfully!'})
                    #return redirect(url_for('auth.user.login'))
                else:
                    flash('Code verification failed', 'error')

                return jsonify({'status': 'error', 
                        'message': 'Email code verification failed!', 
                        'code': code, 'status': otpstatus, 
                        'secret': flask.session['two_factor_auth_secret'], 
                        'email': flask.session['email'], 
                        'user_id': flask.session['user_id']
                        })

        return render_template(self.template, title='Email code verification')
            
    